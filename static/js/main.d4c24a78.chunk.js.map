{"version":3,"sources":["util/url.js","components/lookup.js","components/plot.js","components/body.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Lookup","handleSearch","className","placeholder","onChange","event","Plot","users","undefined","name","map","login","picture","phone","email","dob","key","uuid","data-th","src","medium","first","last","href","target","date","Body","headings","handleSort","width","onClick","toLowerCase","style","Main","state","filteredUsers","ordered","heading","setState","sorted","sort","a","b","localeCompare","filtered","value","filteredList","filter","employee","Object","values","join","toLocaleLowerCase","indexOf","Api","then","response","data","results","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4c24a78.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst URLRANDOM = \"https://randomuser.me/api/?results=20&nat=us\";\r\n\r\n\r\n\r\nexport default {\r\n  search: function() {\r\n    return axios.get(URLRANDOM);\r\n  }\r\n};\r\n","//search = lookup\r\n\r\nimport React from 'react';\r\n\r\n\r\nfunction Lookup ({handleSearch}) {\r\n  return (\r\n    <div className=\"App\">\r\n         <input className=\"input m-3 col-md-3\" placeholder=\"Filter workers\"  onChange = {event => handleSearch(event)}></input>\r\n         <br></br>\r\n         <input className=\"input mx-3 col-md-3\" placeholder=\"Filter by phone\"  onChange = {event => handleSearch(event)}></input>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lookup;","//plot=tablebody\r\n\r\nimport React from \"react\"\r\n\r\nfunction Plot ({users}) {\r\nreturn (\r\n<tbody>\r\n     {users[0]!== undefined && users[0].name !== undefined ? (\r\n      users.map(({login, name, picture, phone, email, dob}) => {\r\n           return (\r\n                <tr key = {login.uuid}>\r\n                     <td \r\n                     data-th = \"image\"\r\n                     >\r\n                          <img \r\n                          src={picture.medium}\r\n                          className = \"img-responsive\"/\r\n                          >\r\n                     </td>\r\n                     <td data-th = \"name\">\r\n                          {name.first}\r\n                          {name.last}\r\n                     </td>\r\n                     <td data-th = \"phone\">\r\n                          {phone}\r\n                         \r\n                     </td>\r\n                     <td data-th = \"email\">\r\n                          <a href={\"mailto:\" +email} target=\"__blank\">{email}</a>\r\n                     </td>\r\n                     <td data-th = \"dob\">\r\n                          {dob.date}\r\n                     </td>\r\n\r\n\r\n                </tr>\r\n           )\r\n      })    \r\n     ):(\r\n          <div></div>\r\n     )}\r\n\r\n</tbody>\r\n)\r\n\r\n}\r\n\r\n\r\n\r\nexport default Plot;","//body = table\r\n\r\nimport React from \"react\"\r\nimport Plot from \"./plot\"\r\n\r\nfunction Body ({headings, users, handleSort}) {\r\n     return (\r\n          <div className=\"mt-3\">\r\n               <table>\r\n                    <thead>\r\n                         <tr>\r\n                              {headings.map(({name, width}) => {\r\n                                   return (\r\n                                      <th \r\n                                      className = \"col-md-3\"\r\n                                      key = {name}\r\n                                      onClick = {() => {\r\n                                           handleSort(name.toLowerCase())\r\n                                      }}\r\n                                      style = {{width}}\r\n                                      >\r\n                                      {name}\r\n                                 \r\n                                      <span></span>     \r\n                                      </th>  \r\n                                   )\r\n                              })}\r\n                         </tr>\r\n                    </thead>\r\n                    <Plot\r\n                    users = {users}\r\n                    ></Plot>\r\n               </table>\r\n          </div>\r\n\r\n     )\r\n}\r\n\r\nexport default Body\r\n\r\n\r\n ","//data = main\r\n\r\nimport React from \"react\"\r\nimport Api from \"../util/url\"\r\nimport Lookup from \"./lookup\"\r\nimport Body from \"./body\"\r\n\r\n\r\nclass Main extends React.Component {\r\n\r\n     state = {\r\n          users: [],\r\n          filteredUsers: [],\r\n          ordered: \"ascend\",\r\n     }\r\n\r\n     heading = [ \r\n          {name: \"Picture\", width: \"10%\"},\r\n          {name: \"Full Name\", width: \"20%\"},\r\n          {name: \"Phone Number\", width: \"10%\"},\r\n          {name: \"Email Address\", width: \"20%\"},\r\n          {name: \"Date of Birth\", width: \"10%\"},      \r\n     ]\r\n\r\n     handleSort = (heading) => {\r\n          if(this.state.ordered === \"ascend\") {\r\n               this.setState({\r\n                    ordered: \"descend\"\r\n               })\r\n          } else {\r\n               this.setState({\r\n                    ordered: \"ascend\"\r\n               })\r\n          }\r\n          const compare = (a, b) => {\r\n               if(this.state.ordered === \"ascend\") {\r\n                    if(a[heading] === undefined) {\r\n                         return 1;\r\n                    } else if(b[heading] === undefined) {\r\n                         return -1;\r\n                    } else if(heading === \"name\") {\r\n                         return a[heading.first.localeCompare(b[heading.first])]\r\n                    } else {\r\n                         return a[heading] - b[heading]\r\n                    }\r\n               } else {\r\n                    if(a[heading] === undefined) {\r\n                         return 1;\r\n                    } else if(b[heading] === undefined) {\r\n                         return -1;\r\n                    } else if(heading === \"name\") {\r\n                         return b[heading.first.localeCompare(a[heading.first])]\r\n                    } else {\r\n                         return b[heading] - a[heading]\r\n                    }\r\n               }\r\n          }\r\n\r\n          const sorted = this.state.filteredUsers.sort(compare)\r\n          this.setState({filteredUsers: sorted})\r\n     }\r\n\r\n     componentDidMount() {\r\n          Api.search().then(response => {\r\n               this.setState({\r\n                    users: response.data.results, \r\n                    filteredUsers: response.data.results\r\n               })\r\n          })\r\n     }\r\n\r\n     handleSearch = (event) => {\r\n          const filtered = event.target.value\r\n          const filteredList = this.state.users.filter(employee => {\r\n               let values = Object.values(employee).join(\"\".toLocaleLowerCase)\r\n               return values.indexOf(filtered.toLocaleLowerCase())!== -1 \r\n          })\r\n          this.setState({filteredUsers: filteredList})\r\n     }\r\n\r\n     render() {\r\n          return (\r\n               <div>\r\n               <Lookup \r\n               handleSearch = {this.handleSearch}\r\n               />\r\n               <div>\r\n               <Body\r\n               headings = {this.heading}\r\n               users = {this.state.filteredUsers}\r\n               handleSort = {this.handleSort}\r\n               ></Body>\r\n               </div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport Main from './components/main';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n  <div>\r\n    <Main/>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}